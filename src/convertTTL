from rdflib import Graph, RDF, RDFS
import json

# Load the RDF graph from the Turtle file
g = Graph()
g.parse("icd11_knowledge_graph.ttl", format="turtle")

# Function to create a hierarchical structure from the RDF graph
def create_hierarchy(graph, parent_node=None):
    if parent_node is None:
        # Get all root nodes (nodes with no parents)
        root_nodes = [
            s
            for s in graph.subjects()
            if not (s, RDFS.subClassOf, None) in graph
        ]
        tree = []
        for node in root_nodes:
            tree.append(create_hierarchy(graph, node))
        return {"name": "Root", "children": tree}  # Create a single root
    else:
        node_name = str(graph.value(parent_node, RDFS.label) or parent_node)
        children = [
            (o, str(graph.value(o, RDFS.label) or o))
            for s, p, o in graph.triples((None, RDFS.subClassOf, parent_node))
        ]
        if children:
            return {
                "name": node_name,
                "children": [create_hierarchy(graph, child) for child, _ in children],
            }
        else:
            return {"name": node_name, "size": 1}


# Create the hierarchy
hierarchy = create_hierarchy(g)


# Convert the hierarchy to JSON
json_data = json.dumps(hierarchy, indent=4)

# Generate the HTML with D3.js visualization
html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>D3 Tree Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .node circle {{ fill: #fff; stroke: steelblue; stroke-width: 2px; }}
        .node text {{ font: 12px sans-serif; }}
        .link {{ fill: none; stroke: #ccc; stroke-width: 1.5px; }}
    </style>
</head>
<body>
    <div id="tree-container"></div>
    <script>
        const data = {json_data};

        const width = 800;
        const height = 600;

        const svg = d3.select("#tree-container")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(40,0)");

        const root = d3.hierarchy(data);
        // Increased the height parameter (first value) to create more space between levels
        const treeLayout = d3.tree().size([height - 200, width - 160]);

        treeLayout(root);

        // Links
        svg.selectAll(".link")
            .data(root.links())
            .enter()
            .append("path")
            .attr("class", "link")
            .attr("d", d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x));

        // Nodes
        const node = svg.selectAll(".node")
            .data(root.descendants())
            .enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${{d.y}},${{d.x}})`);

        node.append("circle")
            .attr("r", 4.5);

        node.append("text")
            .attr("dy", ".31em")
            .attr("x", d => d.children ? -8 : 8)
            .style("text-anchor", d => d.children ? "end" : "start")
            .text(d => d.data.name);

        // Add zoom functionality
        const zoom = d3.zoom()
            .scaleExtent([0.1, 10])
            .on("zoom", zoomed);

        svg.call(zoom);

        function zoomed(event) {{
            svg.attr("transform", event.transform);
        }}

    </script>
</body>
</html>
"""

# Write the HTML content to a file
with open("taxonomy.html", "w") as f:
    f.write(html_content)

print("HTML file 'taxonomy.html' created successfully.")
